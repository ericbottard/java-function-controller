// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/projectriff/function-controller/pkg/controller (interfaces: LagTracker,Deployer)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	controller "github.com/projectriff/function-controller/pkg/controller"
	v1 "github.com/projectriff/function-controller/vendor/github.com/projectriff/kubernetes-crds/pkg/apis/projectriff.io/v1"
	reflect "reflect"
)

// MockLagTracker is a mock of LagTracker interface
type MockLagTracker struct {
	ctrl     *gomock.Controller
	recorder *MockLagTrackerMockRecorder
}

// MockLagTrackerMockRecorder is the mock recorder for MockLagTracker
type MockLagTrackerMockRecorder struct {
	mock *MockLagTracker
}

// NewMockLagTracker creates a new mock instance
func NewMockLagTracker(ctrl *gomock.Controller) *MockLagTracker {
	mock := &MockLagTracker{ctrl: ctrl}
	mock.recorder = &MockLagTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLagTracker) EXPECT() *MockLagTrackerMockRecorder {
	return m.recorder
}

// BeginTracking mocks base method
func (m *MockLagTracker) BeginTracking(arg0 controller.Subscription) error {
	ret := m.ctrl.Call(m, "BeginTracking", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeginTracking indicates an expected call of BeginTracking
func (mr *MockLagTrackerMockRecorder) BeginTracking(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTracking", reflect.TypeOf((*MockLagTracker)(nil).BeginTracking), arg0)
}

// Compute mocks base method
func (m *MockLagTracker) Compute() map[controller.Subscription][]controller.Offsets {
	ret := m.ctrl.Call(m, "Compute")
	ret0, _ := ret[0].(map[controller.Subscription][]controller.Offsets)
	return ret0
}

// Compute indicates an expected call of Compute
func (mr *MockLagTrackerMockRecorder) Compute() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compute", reflect.TypeOf((*MockLagTracker)(nil).Compute))
}

// StopTracking mocks base method
func (m *MockLagTracker) StopTracking(arg0 controller.Subscription) error {
	ret := m.ctrl.Call(m, "StopTracking", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopTracking indicates an expected call of StopTracking
func (mr *MockLagTrackerMockRecorder) StopTracking(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTracking", reflect.TypeOf((*MockLagTracker)(nil).StopTracking), arg0)
}

// MockDeployer is a mock of Deployer interface
type MockDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockDeployerMockRecorder
}

// MockDeployerMockRecorder is the mock recorder for MockDeployer
type MockDeployerMockRecorder struct {
	mock *MockDeployer
}

// NewMockDeployer creates a new mock instance
func NewMockDeployer(ctrl *gomock.Controller) *MockDeployer {
	mock := &MockDeployer{ctrl: ctrl}
	mock.recorder = &MockDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeployer) EXPECT() *MockDeployerMockRecorder {
	return m.recorder
}

// Deploy mocks base method
func (m *MockDeployer) Deploy(arg0 *v1.Function) error {
	ret := m.ctrl.Call(m, "Deploy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deploy indicates an expected call of Deploy
func (mr *MockDeployerMockRecorder) Deploy(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockDeployer)(nil).Deploy), arg0)
}

// Scale mocks base method
func (m *MockDeployer) Scale(arg0 *v1.Function, arg1 int) error {
	ret := m.ctrl.Call(m, "Scale", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scale indicates an expected call of Scale
func (mr *MockDeployerMockRecorder) Scale(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scale", reflect.TypeOf((*MockDeployer)(nil).Scale), arg0, arg1)
}

// Undeploy mocks base method
func (m *MockDeployer) Undeploy(arg0 *v1.Function) error {
	ret := m.ctrl.Call(m, "Undeploy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Undeploy indicates an expected call of Undeploy
func (mr *MockDeployerMockRecorder) Undeploy(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Undeploy", reflect.TypeOf((*MockDeployer)(nil).Undeploy), arg0)
}
